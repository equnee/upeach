"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const saber_utils_1 = require("saber-utils");
const saber_log_1 = require("saber-log");
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const configLoader_1 = require("../utils/configLoader");
const ID = 'builtin:emit-config';
const WatchConfigPlugin = {
    name: ID,
    apply(api) {
        api.hooks.beforeRun.tapPromise(ID, async () => {
            const outPath = api.resolveCache('config.json');
            const emit = (config) => saber_utils_1.fs.outputFile(outPath, JSON.stringify({
                siteConfig: config.siteConfig || {},
                themeConfig: config.themeConfig || {},
                locales: config.locales || {}
            }), 'utf8');
            const checkIfConfigChanged = (newConfig, prevConfig) => {
                const dropUnnecessary = (config) => Object.assign({}, config, {
                    siteConfig: undefined,
                    themeConfig: undefined,
                    locales: undefined
                });
                if (!fast_deep_equal_1.default(dropUnnecessary(newConfig), dropUnnecessary(prevConfig))) {
                    saber_log_1.log.warn(`Found a change in your Saber config file, restart server to see the effect.`);
                }
            };
            // Emit config.json anyways
            await emit(api.config);
            if (api.dev) {
                const cwd = api.configDir || api.resolveCwd();
                const watcher = require('chokidar').watch(configLoader_1.CONFIG_FILES, {
                    ignoreInitial: true,
                    cwd
                });
                const reloadConfig = async () => {
                    const { configPath: newConfigPath, config: newConfig } = api.loadConfig();
                    const prevConfig = api.config;
                    checkIfConfigChanged(newConfig, prevConfig);
                    api.setConfig(newConfig, newConfigPath);
                    await api.hooks.onUpdateConfigFile.promise();
                    await emit(newConfig);
                };
                watcher.on('all', () => {
                    reloadConfig();
                });
            }
        });
    }
};
exports.default = WatchConfigPlugin;
