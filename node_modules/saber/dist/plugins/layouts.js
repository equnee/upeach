"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const saber_utils_1 = require("saber-utils");
const ID = 'builtin:layouts';
const layoutsPlugin = {
    name: ID,
    apply(api) {
        const setLayout = (layouts, filepath, shouldDelete) => {
            const layoutName = path_1.default.basename(filepath, path_1.default.extname(filepath));
            if (shouldDelete) {
                delete layouts[layoutName];
            }
            else {
                layouts[layoutName] = saber_utils_1.slash(filepath);
            }
        };
        const getLayouts = async (dir) => {
            const files = await saber_utils_1.glob('*.{vue,js}', {
                cwd: dir
            });
            const layouts = {};
            files.forEach(file => {
                setLayout(layouts, path_1.default.join(dir, file));
            });
            return layouts;
        };
        const writeLayouts = async (themeLayouts, userLayouts) => {
            const layouts = Object.assign({}, themeLayouts, userLayouts);
            api.log.verbose(() => `Found layouts: ${Object.keys(layouts).join(', ')}`);
            const outFile = api.resolveCache('layouts.js');
            const outContent = `var layouts = {}

      ${Object.keys(layouts)
                .map((name, index) => {
                return `
        import layout_${index} from "${layouts[name]}"
        layouts["${name}"] = layout_${index}
        `;
            })
                .join('\n')}

      export default layouts`;
            await saber_utils_1.fs.outputFile(outFile, outContent, 'utf8');
        };
        api.hooks.beforeRun.tapPromise(ID, async () => {
            const themeLayoutsDir = path_1.default.join(api.theme, 'layouts');
            const userLayoutsDir = api.resolveCwd('layouts');
            const [themeLayouts, userLayouts] = await Promise.all([
                getLayouts(themeLayoutsDir),
                getLayouts(userLayoutsDir)
            ]);
            await writeLayouts(themeLayouts, userLayouts);
            if (api.dev) {
                const watchLayouts = (dir, layouts) => {
                    const chokidar = require('chokidar');
                    const onRemoveDir = async (dir) => {
                        if (!dir) {
                            Object.keys(layouts).forEach(name => {
                                delete layouts[name];
                            });
                            await writeLayouts(themeLayouts, userLayouts);
                        }
                    };
                    const onAddLayout = async (file) => {
                        setLayout(layouts, path_1.default.join(dir, file));
                        await writeLayouts(themeLayouts, userLayouts);
                    };
                    const onRemoveLayout = async (file) => {
                        setLayout(layouts, path_1.default.join(dir, file), true);
                        await writeLayouts(themeLayouts, userLayouts);
                    };
                    // Clear the layouts object when the layouts directory is removed
                    chokidar
                        .watch('.', {
                        cwd: dir,
                        disableGlobbing: true,
                        ignored(filepath) {
                            return filepath !== dir;
                        },
                        ignoreInitial: true
                    })
                        .on('unlinkDir', (dir) => {
                        onRemoveDir(dir);
                    });
                    // Add/Remove layout components
                    chokidar
                        .watch('*.{vue,js}', { cwd: dir, ignoreInitial: true })
                        .on('add', (file) => {
                        onAddLayout(file);
                    })
                        .on('unlink', (file) => {
                        onRemoveLayout(file);
                    });
                };
                // No need to watch theme layouts if it's from an npm package
                if (!themeLayoutsDir.includes('node_modules')) {
                    watchLayouts(themeLayoutsDir, themeLayouts);
                }
                watchLayouts(userLayoutsDir, userLayouts);
            }
        });
    }
};
exports.default = layoutsPlugin;
