"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const superstruct_1 = require("superstruct");
/**
 * Validate saber config
 */
function validateConfig(config, { dev }) {
    const siteConfig = superstruct_1.struct.interface({
        title: 'string?',
        description: 'string?'
    }, {});
    // Type of Saber plugins
    const plugins = superstruct_1.struct.union([
        ['string'],
        [
            {
                resolve: 'string',
                options: 'object?'
            }
        ]
    ], []);
    const markdown = superstruct_1.struct({
        slugify: 'string?',
        options: 'object?',
        headings: 'object?',
        highlighter: 'string?',
        lineNumbers: 'boolean?',
        // Same as the type of Saber plugins
        plugins
    }, {
        plugins: []
    });
    const themeConfig = superstruct_1.struct.interface({}, {});
    const permalinks = superstruct_1.struct.union(['object', 'function'], {});
    const server = superstruct_1.struct({
        host: 'string?',
        port: 'number?'
    }, {
        host: '0.0.0.0',
        port: 3000
    });
    const build = superstruct_1.struct({
        publicUrl: 'string?',
        extractCSS: 'boolean?',
        loaderOptions: 'object?',
        cssSourceMap: 'boolean?',
        lazy: 'boolean?',
        outDir: 'string?',
        cache: 'boolean?'
    }, {
        publicUrl: '/',
        extractCSS: false,
        loaderOptions: {},
        cssSourceMap: false,
        lazy: false,
        outDir: 'public',
        cache: true
    });
    const locales = superstruct_1.struct('object', {});
    const theme = superstruct_1.struct('string?');
    const template = superstruct_1.struct({
        openLinkInNewTab: 'boolean',
        plugins: ['any']
    }, {
        openLinkInNewTab: true,
        plugins: []
    });
    const schema = superstruct_1.struct({
        build,
        siteConfig,
        themeConfig,
        locales,
        theme,
        plugins,
        markdown,
        permalinks,
        server,
        template
    });
    const [err, result] = schema.validate(config);
    if (err) {
        throw new Error(`Invalid Saber config: ${err.message}`);
    }
    if (dev) {
        // Always use  / in dev mode
        result.build.publicUrl = '/';
    }
    else {
        // Ensure that build.publicUrl ends with slash
        result.build.publicUrl = result.build.publicUrl.replace(/\/?$/, '/');
    }
    return result;
}
exports.validateConfig = validateConfig;
